/**
 * 请实现一个函数， 输入一个整数， 输出该数二进制表示中 1 的个数。 
 * 例如把9表示成二进制是1001， 有2位是1。 因此如果输入9， 该函数输出2
 */
/**
 * 分析：此题考查的是位运算
 * 位运算:将数字转换成二进制后，对每一位上0或者1的运算，如下：
 * 或运算(|):0|0=0 ; 1|0=1 ; 0|1=1; 1|1=1
 * 与运算(&):0&0=0;  1&0=0 ; 0&1=0; 1&1=1
 * 异或运算(^):0^0=0; 1^0=1; 0^1=1;  1^1=0
 * 左移运算: m<<n 把m 左移n 位；左移n的时候，最左边的n位丢掉，同时在右边补n个0
 * 00001010<<2 = 00101000
 * 10001010<<3 = 01010000
 * 右移运算: m >> n把m右移n位； 右移n的时候， 最右边的n位丢掉， 
 * 如果数字原先是正数， 就在左边补n个0； 如果是负数， 在左边补n个1
 * 00001010>>2 = 00000010
 * 10001010>>2 = 11100010
 */

function count1InNum(n) {
    let flag = 1,
        count = 0;
    while (flag) {
        if (flag & n) {
            count++;
        }
       flag= flag << 1
    }
    return count
}
console.log(count1InNum(5))

/**
 * 输入两个整数m和n， 计算需要改变m的二进制表示中的多少位才能得到n。 
 * 比如 10 的二进制表示为 1010， 13 的二进制表示为1101， 需要改变1010中的3位才能得到1101
 */
/**
 * 思路：算出两个整数的异或
 * 统计异或中1的数量
 */
function step(m,n){
    let res=m^n
    return count1InNum(res)
}
console.log(step(10,13))